---
// src/pages/productos.astro - TYPESCRIPT CORREGIDO
import Layout from '../components/layout/Layout.astro';
import { getProducts } from '../lib/supabase';
import type { Product } from '../lib/types';

// Obtener productos de la base de datos
let products: Product[] = [];

try {
  products = await getProducts();
  console.log(`üì¶ ${products.length} productos cargados`);
} catch (error) {
  console.error('‚ùå Error cargando productos:', error);
}
---

<Layout 
  title="Productos - Kamasex.shop" 
  description="Explora nuestra colecci√≥n de productos premium para el bienestar √≠ntimo femenino"
>
  <div class="min-h-screen bg-gray-50 py-12">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      
      <!-- Header -->
      <div class="text-center mb-12">
        <h1 class="text-4xl font-bold text-gray-900 mb-4">Nuestros Productos</h1>
        <p class="text-xl text-gray-600 max-w-2xl mx-auto">
          Descubre nuestra cuidadosa selecci√≥n de productos premium para tu bienestar y confianza
        </p>
      </div>

      <!-- Productos Grid -->
      {products.length > 0 ? (
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {products.map(product => (
            <div class="bg-white rounded-lg border border-gray-200 overflow-hidden hover:shadow-lg transition-all duration-300 group">
              
              <!-- Imagen del producto -->
              <div class="relative aspect-square bg-gray-100 overflow-hidden">
                <a href={`/producto/${product.slug || product.id}`}>
                  {product.image_url ? (
                    <img
                      src={product.image_url}
                      alt={product.name}
                      class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                      loading="lazy"
                    />
                  ) : (
                    <div class="w-full h-full bg-gray-100 flex items-center justify-center">
                      <svg class="w-16 h-16 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                      </svg>
                    </div>
                  )}
                </a>

                <!-- Badges -->
                {!product.is_active || product.stock <= 0 ? (
                  <div class="absolute top-3 left-3 bg-red-100 text-red-800 text-xs font-medium px-2 py-1 rounded">
                    Agotado
                  </div>
                ) : product.featured ? (
                  <div class="absolute top-3 right-3 bg-gray-900 text-white text-xs font-medium px-2 py-1 rounded">
                    Destacado
                  </div>
                ) : null}
              </div>

              <!-- Informaci√≥n del producto -->
              <div class="p-4 space-y-3">
                
                <!-- Categor√≠a -->
                {product.category && (
                  <p class="text-xs text-gray-500 uppercase tracking-wide font-medium">
                    {product.category}
                  </p>
                )}

                <!-- Nombre -->
                <h3 class="font-medium text-gray-900 line-clamp-2 leading-tight">
                  <a href={`/producto/${product.slug || product.id}`} class="hover:text-gray-700 transition-colors">
                    {product.name}
                  </a>
                </h3>

                <!-- Precio y stock -->
                <div class="flex items-center justify-between">
                  <p class="text-lg font-bold text-gray-900">
                    ${product.price.toLocaleString()}
                  </p>
                  
                  {product.stock > 0 && product.stock <= 5 && (
                    <span class="text-xs text-orange-600 font-medium bg-orange-50 px-2 py-1 rounded">
                      Solo {product.stock}
                    </span>
                  )}
                </div>

                <!-- Descripci√≥n -->
                {product.description && (
                  <p class="text-xs text-gray-500 line-clamp-2 leading-relaxed">
                    {product.description}
                  </p>
                )}

                <!-- Acciones -->
                <div class="space-y-2">
                  {product.is_active && product.stock > 0 ? (
                    <button
                      class="w-full bg-gray-900 text-white py-2.5 px-4 rounded-md text-sm font-medium hover:bg-gray-800 transition-colors add-to-cart-btn"
                      data-product-id={product.id}
                      data-product-name={product.name}
                      data-product-price={product.price}
                      data-product-image={product.image_url || ''}
                      data-product-category={product.category || ''}
                    >
                      Agregar al carrito
                    </button>
                  ) : (
                    <div class="w-full bg-gray-100 text-gray-400 py-2.5 px-4 rounded-md text-sm font-medium text-center cursor-not-allowed">
                      Producto agotado
                    </div>
                  )}
                  
                  <a
                    href={`/producto/${product.slug || product.id}`}
                    class="block w-full text-center border border-gray-300 text-gray-700 py-2 px-4 rounded-md text-sm font-medium hover:bg-gray-50 transition-colors"
                  >
                    Ver detalles
                  </a>
                </div>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <!-- Estado vac√≠o -->
        <div class="text-center py-12">
          <div class="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0H4m16 0l-2-3m2 3l-2 3M4 13l2-3m-2 3l2 3" />
            </svg>
          </div>
          <h3 class="text-lg font-medium text-gray-900 mb-2">
            No hay productos disponibles
          </h3>
          <p class="text-gray-600">
            Estamos trabajando para traerte los mejores productos muy pronto.
          </p>
        </div>
      )}

      <!-- Informaci√≥n adicional -->
      <div class="mt-16 bg-white rounded-lg border p-8">
        <div class="text-center">
          <h2 class="text-2xl font-bold text-gray-900 mb-4">¬øNo encuentras lo que buscas?</h2>
          <p class="text-gray-600 mb-6 max-w-2xl mx-auto">
            Nuestro equipo est√° constantemente actualizando nuestro cat√°logo. 
            Cont√°ctanos si hay algo espec√≠fico que te gustar√≠a encontrar.
          </p>
          <a 
            href="/contacto" 
            class="inline-flex items-center px-6 py-3 border border-transparent rounded-md shadow-sm text-base font-medium text-white bg-gray-900 hover:bg-gray-800 transition-colors"
          >
            Cont√°ctanos
          </a>
        </div>
      </div>
    </div>
  </div>

  <!-- ‚úÖ SCRIPT CORREGIDO SIN ERRORES TYPESCRIPT -->
  <script>
    console.log('üõí P√°gina de productos cargada');

    // ‚úÖ DECLARACIONES GLOBALES PARA TYPESCRIPT
    declare global {
      interface Window {
        addProductToCart: (id: string, name: string, price: number, image: string, category: string, buttonElement?: HTMLElement) => void;
      }
    }

    // ‚úÖ FUNCI√ìN GLOBAL PARA AGREGAR AL CARRITO (TYPESCRIPT CORREGIDO)
    window.addProductToCart = function(productId: string, productName: string, productPrice: number, productImage: string, productCategory: string, buttonElement?: HTMLElement): void {
      console.log('‚ûï Agregando producto:', productName);
      
      // Prevenir m√∫ltiples clicks
      if (buttonElement && (buttonElement as any).disabled) return;
      
      const originalText = buttonElement ? buttonElement.textContent || '' : '';
      
      if (buttonElement) {
        (buttonElement as any).disabled = true;
        buttonElement.textContent = 'Agregando...';
        buttonElement.className = buttonElement.className.replace('bg-gray-900', 'bg-gray-400');
      }
      
      try {
        // Validar datos para evitar NaN
        const validPrice = typeof productPrice === 'number' && !isNaN(productPrice) ? productPrice : 0;
        
        // Obtener carrito actual
        const existingCart = localStorage.getItem('kamasex-cart');
        let cart = existingCart ? JSON.parse(existingCart) : [];
        
        // Buscar si el producto ya existe
        const existingIndex = cart.findIndex((item: any) => item.id === productId);
        
        if (existingIndex >= 0) {
          // Actualizar cantidad existente
          cart[existingIndex].quantity += 1;
        } else {
          // Agregar nuevo producto
          cart.push({
            id: productId,
            name: productName,
            price: validPrice,
            image: productImage,
            category: productCategory,
            quantity: 1,
            created_at: new Date().toISOString()
          });
        }
        
        // Guardar en localStorage
        localStorage.setItem('kamasex-cart', JSON.stringify(cart));
        
        // Disparar evento para actualizar contadores
        window.dispatchEvent(new CustomEvent('cart-updated', { 
          detail: { cart: cart }
        }));
        
        console.log('‚úÖ Producto agregado al carrito');
        
        // Mostrar notificaci√≥n
        showNotification(`${productName} agregado al carrito`, 'success');
        
        // Cambiar bot√≥n a √©xito
        if (buttonElement) {
          buttonElement.textContent = '¬°Agregado!';
          buttonElement.className = buttonElement.className.replace('bg-gray-400', 'bg-green-600');
        }
        
      } catch (error) {
        console.error('‚ùå Error agregando al carrito:', error);
        showNotification('Error agregando producto', 'error');
      } finally {
        // Restaurar bot√≥n despu√©s de un delay
        setTimeout(() => {
          if (buttonElement) {
            (buttonElement as any).disabled = false;
            buttonElement.textContent = originalText;
            buttonElement.className = buttonElement.className.replace('bg-green-600', 'bg-gray-900').replace('bg-gray-400', 'bg-gray-900');
          }
        }, 1500);
      }
    };

    // ‚úÖ FUNCI√ìN PARA MOSTRAR NOTIFICACIONES
    function showNotification(message: string, type: string = 'info'): void {
      const notification = document.createElement('div');
      notification.className = `
        fixed top-4 right-4 z-50 max-w-sm p-4 rounded-lg shadow-lg transition-all duration-300
        ${type === 'success' ? 'bg-green-50 border border-green-200 text-green-800' : ''}
        ${type === 'error' ? 'bg-red-50 border border-red-200 text-red-800' : ''}
        ${type === 'info' ? 'bg-blue-50 border border-blue-200 text-blue-800' : ''}
      `;
      
      notification.innerHTML = `
        <div class="flex items-center justify-between">
          <p class="text-sm font-medium">${message}</p>
          <button onclick="this.parentElement.parentElement.remove()" 
                  class="ml-4 text-current opacity-50 hover:opacity-100">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
          </button>
        </div>
      `;
      
      document.body.appendChild(notification);
      
      // Auto-remover despu√©s de 3 segundos
      setTimeout(() => {
        notification.remove();
      }, 3000);
    }

    // ‚úÖ EVENT LISTENER PARA BOTONES DE AGREGAR AL CARRITO
    document.addEventListener('DOMContentLoaded', function() {
      const addToCartButtons = document.querySelectorAll('.add-to-cart-btn');
      
      addToCartButtons.forEach(function(button) {
        button.addEventListener('click', function(e) {
          e.preventDefault();
          
          const buttonElement = e.target as HTMLElement;
          const productId = buttonElement.dataset.productId || '';
          const productName = buttonElement.dataset.productName || '';
          const productPrice = parseFloat(buttonElement.dataset.productPrice || '0');
          const productImage = buttonElement.dataset.productImage || '';
          const productCategory = buttonElement.dataset.productCategory || '';
          
          if (productId && productName && !isNaN(productPrice)) {
            window.addProductToCart(productId, productName, productPrice, productImage, productCategory, buttonElement);
          } else {
            console.error('‚ùå Datos de producto inv√°lidos');
            showNotification('Error: datos de producto inv√°lidos', 'error');
          }
        });
      });

      console.log('‚úÖ Funciones de productos inicializadas correctamente');
    });
  </script>
</Layout>